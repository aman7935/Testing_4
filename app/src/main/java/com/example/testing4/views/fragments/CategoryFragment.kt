package com.example.testing4.views.fragmentsimport android.os.Bundleimport android.text.Editableimport android.text.TextWatcherimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.Toastimport androidx.fragment.app.Fragmentimport androidx.lifecycle.ViewModelProviderimport androidx.navigation.fragment.findNavControllerimport androidx.recyclerview.widget.GridLayoutManagerimport com.example.testing4.Rimport com.example.testing4.adapters.recyclerviewadapters.CategoryProductRV_Adapterimport com.example.testing4.api.RetrofitInstanceimport com.example.testing4.clicklisteners.OnClickDeleteFromCategoryimport com.example.testing4.clicklisteners.OnClickSaveimport com.example.testing4.clicklisteners.OnItemClickListenerDetailsimport com.example.testing4.clicklisteners.OnItemClickSaveInProductCartimport com.example.testing4.database.DataBaseProviderimport com.example.testing4.database.Databaseimport com.example.testing4.databinding.FragmentCategoryBindingimport com.example.testing4.factory.Factoryimport com.example.testing4.models.entities.ProductCartimport com.example.testing4.models.entities.ProductItemsEntityimport com.example.testing4.models.product.ProductsItemimport com.example.testing4.models.resource.Resultimport com.example.testing4.repo.Repoimport com.example.testing4.utils.Loaderimport com.example.testing4.viewmodels.ViewModelimport com.example.testing4.views.auth.userIdclass CategoryFragment : Fragment() {    private lateinit var binding: FragmentCategoryBinding    private lateinit var myAdapter: CategoryProductRV_Adapter    private val productItems = ArrayList<ProductsItem>()    private lateinit var item: String    private var filteredItems = ArrayList<ProductsItem>()    private lateinit var viewModel: ViewModel    private lateinit var repo: Repo    private lateinit var db: Database    private var dbItems = ArrayList<ProductItemsEntity>()    private val cartItems = ArrayList<ProductCart>()    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?    ): View? {        binding = FragmentCategoryBinding.inflate(inflater, container, false)        db = DataBaseProvider.getInstance(requireContext())        repo = Repo(RetrofitInstance.retroFitApi, db.dbDao)        viewModel = ViewModelProvider(this, Factory(repo))[ViewModel::class.java]        return binding.root    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        item = arguments?.getString("name") ?: ""        setUpRecyclerView()        viewModel.getAllFavorites(userId)        viewModel.getAllCartItems(userId)        observeAllFavorites()        observeData()        binding.backButton.setOnClickListener { findNavController().navigateUp() }        binding.searchEditText.addTextChangedListener(object : TextWatcher {            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}            override fun afterTextChanged(s: Editable?) {                val query = binding.searchEditText.text.toString().lowercase().trim()                filterProducts(query)            }        })    }    private fun observeAllFavorites(){        viewModel.favorites.observeForever { data ->            dbItems.clear()            data.data?.let { dbItems.addAll(it) }        }        viewModel.cartItems.observeForever {            cartItems.clear()            it.data?.let { cartItems.addAll(it) }        }    }    private fun filterProducts(query: String) {        filteredItems.clear()        filteredItems.addAll(            if (query.isEmpty()) {                productItems.filter { it.category.name == item }            } else {                productItems.filter { it.title.lowercase().trim().contains(query) }            })        myAdapter.updateList(filteredItems.toList())    }    private fun setUpRecyclerView() {        myAdapter = CategoryProductRV_Adapter(            productItems,            onItemClickListenerForDetails = object : OnItemClickListenerDetails {                override fun onClickForDetails(id: Int) {                    val bundle = Bundle().apply {                        putInt("id", id)                    }                    findNavController().navigate(R.id.detailsFragment, bundle)                }            },            onClickSave = object : OnClickSave {                override fun onSaveProduct(items: ProductsItem) {                    viewModel.saveToFavorites(items)                }            },            onClickDeleteFromCategory = object : OnClickDeleteFromCategory {                override fun onClickDeleteFromCategory(                    item: ProductsItem,                    userId: String                ) {                    viewModel.deleteFromFavorites(item.id, userId)                }            },            onItemClickSaveInProductCart = object : OnItemClickSaveInProductCart {                override fun onClickSaveInCart(                    userId: String,                    productsItem: ProductsItem                ) {                    val productCart = ProductCart(                        userId = com.example.testing4.views.auth.userId,                        products = productsItem,                        pID = productsItem.id,                        quantity = 1                    )                    viewModel.saveInCart(productsItem.id, productCart)                }            })        binding.categoryRV2.layoutManager = GridLayoutManager(requireContext(), 2)        binding.categoryRV2.adapter = myAdapter    }    private fun observeData() {        viewModel.products.observe(viewLifecycleOwner) { resource ->            when (resource.result) {                Result.LOADING -> Loader.showDialog(requireContext())                Result.SUCCESS -> {                    Loader.hideDialog()                    productItems.clear()                    resource.data?.let { products ->                        products.forEach { apiProduct ->                            val isFavorite = dbItems.any { it.id == apiProduct.id }                            apiProduct.isFavourite = if (isFavorite) 1 else 0                            val isInCart = cartItems.any { it.pID == apiProduct.id }                            apiProduct.inCart = if (isInCart) 1 else 0                            productItems.add(apiProduct)                        }                        filterProducts(binding.searchEditText.text.toString())                    }                }                Result.FAILURE -> {                    Loader.hideDialog()                    Toast.makeText(requireContext(), resource.message, Toast.LENGTH_SHORT).show()                }            }        }        viewModel.getProducts()    }}